* Name & email
#+BEGIN_SRC elisp
(setq user-full-name "Drew Bruce"
      user-mail-address "drew@drewbruce.com")
(defvar my/work-email "drew.bruce@nike.com")
#+END_SRC
* DOOM UI
#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "monospace" :size 14))
(setq doom-theme 'doom-one)
(setq display-line-numbers-type t)
#+END_SRC
* Org
** Directories
#+BEGIN_SRC elisp
(setq org-directory "~/org/")
(setq deft-directory "~/org")
(setq org-roam-directory "~/org/notes")
(setq org-agenda-files '("~/org/tasks", "~/.doom.d/config.org"))
#+END_SRC
** Deft
#+BEGIN_SRC elisp
(setq deft-extensions '("txt" "tex" "org"))
(setq deft-recursive t)
#+END_SRC
** Refiling
#+BEGIN_SRC elisp
(defvar my/refile-targets
  (mapcar 'abbreviate-file-name
          (split-string
           (shell-command-to-string "find -L ~/org -name '*.org'") "\n")))
(setq org-refile-targets '((my/refile-targets :maxlevel . 2)))
#+END_SRC
** Keybinds
#+BEGIN_SRC elisp
(map! :after org
      :map org-mode-map
      :n :desc "refile headline" "C-c r" #'org-refile
      :n :desc "insert snippet" "C-c s" #'yas-insert-snippet
      :n :desc "insert link & goto" "C-c i" #'org-roam-insert
      :n :desc "insert link" "C-c I" #'org-roam-insert-immediate)
#+END_SRC
** Spell-fu
Do not spell check words in SRC blocks. Not working very well ATM.
#+BEGIN_SRC elisp
(setq-hook! 'org-mode-hook
  spell-fu-faces-exclude '(org-src-block-faces))
#+END_SRC
*** TODO Fix spell-fu exclude org src block
** Capture Templates
#+BEGIN_SRC elisp
(after! org-roam
    (setq org-roam-capture-templates
        '(
            ("l" "literature" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "literature/${slug}"
            :head "#+title: ${title}\n#+date: %<%m/%d/%Y>\nTime-stamp: <>\n"
            :empty-lines 1
            :unnarrowed t)
            ("m" "meeting" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "meeting/${slug}"
            :head "#+title: ${title}\n#+date: %<%m/%d/%Y>\nTime-stamp: <>\n"
            :empty-lines 1
            :unnarrowed t)
            ("p" "project" plain (function org-roam--capture-get-point)

            "%?"
            :file-name "project/${slug}"
            :head "#+title: ${title}\n#+date: %<%m/%d/%Y>\nTime-stamp: <>\n"
            :empty-lines 1
            :unnarrowed t)
            ("t" "topic" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "topic/${slug}"
            :head "#+title: ${title}\n#+date: %<%m/%d/%Y>\nTime-stamp: <>\n"
            :empty-lines 1
            :unnarrowed t)
            ))

    (setq org-roam-dailies-capture-templates
        '(
            ("d" "daily" plain (function org-roam--capture-get-point)
            ""
            :immediate-finish t
            :file-name "journal/%<%Y-%m-%d>"
            :head "#+title: %<%Y-%m-%d>\n#+roam_tags\n")
        )))
#+END_SRC
** Babel
When running org-babel-tangle with ':comments org|both' strip out properties from comments
#+BEGIN_SRC elisp
(after! org-babel
    (defun my/remove-properties (str)
        (string-join (seq-filter (lambda (st) (not (string-prefix-p ":" st))) (split-string str "\n")) "\n"))
    (setq org-babel-process-comment-text 'my/remove-properties))
#+END_SRC
* Global binds
#+BEGIN_SRC elisp
(map! :leader
      :desc "M-x" "x" #'counsel-M-x
      :desc "other-window" "w o" #'other-window
      :desc "org-capture" "n n" #'org-roam-capture
      :desc "org-today" "n j" #'org-roam-dailies-today)
#+END_SRC
* Time stamps
Add time-stamps to Time-stamp: <> (in first 8 lines) when writing files
Not working very well for me ATM. Exporting timestamps is awkward.
#+BEGIN_SRC elisp
(after! time-stamp
  (add-hook 'write-file-functions 'time-stamp))
#+END_SRC
** TODO Change time-stamp to '#+LAST_CHANGED' or something
* Elfeed
setup goodies
#+BEGIN_SRC elisp
(elfeed-goodies/setup)
#+END_SRC

* Helpful
** Macros
*** load!
for loading external *.el files relative to this one
*** use-package
for configuring packages
*** after!
for running code after a package has loaded
*** add-load-path!
for adding directories to the `load-path', where Emacs
looks when you load packages with `require' or `use-package'.
*** map!
for binding new keys
** Shortcuts
*** K
documentation on symbol
*** gd
symbol definition
